#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const os = require('os');
const inquirer = require('inquirer');
const { exec } = require('child_process');

const wallpapersDir = path.join(process.env.HOME, 'Pictures', 'Wallpapers');

function getWallpapers() {
  try {
    const files = fs.readdirSync(wallpapersDir);
    const wallpapers = files.filter(file => {
      return /\.(jpg|jpeg|png|bmp|gif)$/i.test(file);
    }).map(file => path.join(wallpapersDir, file));
    return wallpapers;
  } catch (err) {
    console.error('Error reading directory:', err);
    return [];
  }
}

async function selectWallpaper() {
  const wallpapers = getWallpapers();

  if (wallpapers.length === 0) {
    console.log('No wallpapers found in the directory.');
    return;
  }

  const prompt = inquirer.createPromptModule();

  const { selectedWallpaper } = await prompt([
    {
      type: 'list',
      name: 'selectedWallpaper',
      message: 'Select a wallpaper:',
      choices: wallpapers.map(wallpaper => ({
        name: path.basename(wallpaper), // Display file name only
        value: wallpaper // Store the full path as the value
      })),
      loop: false, // Prevent looping through choices once selected
      searchText: 'Type to search...' // User can search in the list
    }
  ]);

  const filePath = path.join(os.homedir(), '.wallpaperc');

  fs.writeFile(filePath, selectedWallpaper, (err) => {
    if (err) {
      console.error('Error writing to file', err);
    } else {
      exec('pkill -USR1 -x sxhkd && bspc wm -r', (err, stdout, stderr) => {
        if (err) {
          console.error(`Error executing command: ${err.message}`);
          return;
        }
        if (stderr) {
          console.error(`stderr: ${stderr}`);
          return;
        }
      });
    }
  });
}

selectWallpaper();

